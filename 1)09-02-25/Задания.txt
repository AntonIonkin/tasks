1. Swap Two Numbers (Обмен значений).
Напишите функцию swap, которая принимает два указателя на int и меняет значения,
на которые они указывают. Функция должна использовать синтаксис указателей в Go,
так что после вызова, например, swap(&a, &b) (где a = 3, b = 5) значения переменных
поменяются местами (будет a = 5, b = 3).

2. Модификация копии среза (Increment/Decrement элементов).
Напишите функцию ModifySliceCopy, которая принимает срез целых чисел []int, создает его глубокую копию
и изменяет каждый элемент копии следующим образом:
- Если элемент нечетный, увеличить его на 1.
- Если элемент четный, уменьшить его на 1.
Функция должна возвращать новый срез с модифицированными значениями, 
оставляя исходный срез без изменений.

3. Поиск минимального элемента в срезе (возврат указателя).
Реализуйте функцию minElement(slice []int) *int, которая принимает 
срез целых чисел и возвращает указатель на минимальное значение в срезе.
Если срез пуст, функция должна вернуть nil. Например, для среза []int{5, 3, 8, 2, 7} функция должна
вернуть указатель на число 2.

4. Создание односвязного списка.
Определите структуру:

type Node struct {
    Value int
    Next  *Node
}

Реализуйте функцию createList(n int) *Node, которая создаёт 
односвязный список из n узлов, где каждый узел имеет значение, 
равное его порядковому номеру (начиная с 1). Если n меньше или равно 0, 
функция должна вернуть nil. Например, вызов createList(3) должен создать список: 1 -> 2 -> 3 -> nil.

5. Выбор меньшего из двух указателей с обработкой nil. 
Реализуйте функцию minPointer(a, b *int) *int, которая принимает 
два указателя на int и возвращает тот, на который указывает меньшее значение. 
Если один из указателей равен nil, функция возвращает другой; если оба равны nil, 
то возвращается nil. Например, если a указывает на 15, а b указывает на 10, 
функция должна вернуть указатель b.